import json
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes,CommandHandler,CallbackQueryHandler
from telegram import ChatPermissions
from dotenv import load_dotenv
import random
import re
from ollama import Client  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç Ollama
import aiohttp
from bs4 import BeautifulSoup
with open('knowledge_base.json', 'r', encoding='utf-8') as f:
    knowledge_base = json.load(f)


load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
banning = os.getenv("BANNING", "False").lower() == "true"
captcha = os.getenv("CAPTCHA", "False").lower() == "true"
timezone = timedelta(hours=(int(os.getenv("TIMEZONE", 0))))
captcha_storage = {}

ollama = Client(host='http://localhost:11434')
OLLAMA_MODEL = "llama3.1:8b"  # –∏–ª–∏ "mistral", "deepseek-llm" –∏ —Ç.–¥.
TARGET_SITES = ["https://abiturient.ru"]  # –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
MAX_PAGES_TO_SEARCH = 100000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
SEARXNG_URL = os.getenv("SEARXNG_URL", "http://localhost:8181")  # –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ SearxNG




# –ß—Ç–µ–Ω–∏–µ  —Å–ª–æ–≤ –∏ –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
with open('./banword.txt', 'r', encoding='utf-8') as file:
    forbidden_words = [word.strip().lower() for word in file if word.strip()]

with open("channels.json", "r", encoding="utf-8") as f:
    channels = json.load(f)

async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã."""
    if not update.message or not update.message.chat:
        return False

    chat_id = update.message.chat.id
    user_id = update.message.from_user.id

    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        return any(admin.user.id == user_id for admin in admins)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∫–∏: {e}")
        return False



async def searx_search(query: str) -> tuple[str, str]:
    """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ SearxNG –∏ –ø–∞—Ä—Å–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    try:
        params = {
            "q": f"site:abiturient.ru {query}",
            "format": "json",
            "language": "ru"
        }
        headers = {"Accept": "application/json"}

        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{SEARXNG_URL}/search", params=params, headers=headers, timeout=10
            ) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    print(f"SearxNG —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {data}")

                    filtered_results = [
                        r for r in data.get('results', []) if 'abiturient.ru' in r['url']
                    ]
                    if filtered_results:
                        first = filtered_results[0]
                        url = first['url'].split('?')[0]

                        full_text = await fetch_full_text(session, url)
                        return full_text, url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ SearxNG: {e}")
    return "", ""



async def fetch_full_text(session, url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —á–∏—Å—Ç–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        async with session.get(url, timeout=10) as resp:
            if resp.status == 200:
                html = await resp.text()
                soup = BeautifulSoup(html, 'html.parser')

                # –£–¥–∞–ª–∏–º —Å–∫—Ä–∏–ø—Ç—ã/—Å—Ç–∏–ª–∏
                for tag in soup(['script', 'style']):
                    tag.decompose()

                text = soup.get_text(separator='\n')
                clean_text = '\n'.join(line.strip() for line in text.splitlines() if line.strip())
                return clean_text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {url}: {e}")
    return ""


async def ask_ollama(question: str) -> str:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É –ª–æ–∫–∞–ª—å–Ω–æ–π LLM —á–µ—Ä–µ–∑ Ollama."""
    try:
        response = ollama.generate(
            model=OLLAMA_MODEL,
            prompt=f"–û—Ç–≤–µ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π, –≥–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏ –Ω–µ –≤—ã–¥–∞–≤–∞–π —á—Ç–æ —Ç—ã –ò–ò, –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–π –æ—Ç–≤–µ—Ç,–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ, —Å—Å—ã–ª–∫–∏ –ø–∏—Å–∞—Ç—å –Ω–µ –Ω–∞–¥–æ –µ–µ –±—É–¥–µ—Ç –∏–º –≤–∏–¥–Ω–æ, –Ω–µ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ç—ã —á–µ–≥–æ —Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å: {question}",
            stream=False
        )
        return response['response']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Ollama: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å."





async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #if not update.message or not update.message.text:
    #    return
    message = update.message or update.edited_message
    if not message or not message.text:
        return

    user = message.from_user
    message_text = message.text.lower()
    chat_id = str(message.chat_id)
    try:
        censor = channels[chat_id]["censor"]
    except:
        censor = "True"
    if censor == "True" and  any(word in message_text.split() for word in forbidden_words):
        try:
            await message.delete()
            try:
                ban_minutes = int(channels[chat_id]["ban_duration"])
                ban_duration = timedelta(minutes=ban_minutes)
                print(ban_duration)
            except:
                pass
            if  not ban_duration: return # –≤ —Ç–µ–æ—Ä–∏–∏ –ª–æ–≥—á–Ω–æ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º—ã —É–¥–∞–ª–∏–ª–∏ –∏ —Ä–∞–∑ –Ω–µ –±–∞–Ω–∏–º —Ç–æ –Ω–µ—á–µ–≥–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á–µ —Ç–æ –¥–µ–ª–∞—Ç—å 
            
            if  ban_minutes>= 60:
                hours = ban_minutes // 60
                mins = ban_minutes % 60
                duration = f"{hours} —á–∞—Å{'–∞' if 2 <= hours % 10 <= 4 and (hours % 100 < 10 or hours % 100 > 20) else '–æ–≤'}" + (f" {mins} –º–∏–Ω" if mins else "")
            else:
                duration = f"{ban_minutes} –º–∏–Ω—É—Ç{'—É' if ban_minutes == 1 else ('—ã' if 2 <= ban_minutes % 10 <= 4 and (ban_minutes % 100 < 10 or ban_minutes % 100 > 20) else '')}"

            permissions = ChatPermissions(
                can_send_messages=False,  
                can_send_polls=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False,
            )
            restrict_duration = ban_duration
            until_date = datetime.now() + restrict_duration - timezone
            
            await context.bot.restrict_chat_member(
                chat_id=message.chat_id,
                user_id=user.id,
                permissions=permissions,
                until_date=until_date
            )
            
            warning = (
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} "
                f"–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ {duration} "
            )
            await context.bot.send_message(
                chat_id=message.chat_id,
                text=warning
            )
        except Exception as error:
            print(f'–û—à–∏–±–∫–∞: {error}')
        

    try:
        
        llm = channels[chat_id]["llm"]
        print(channels[chat_id]["llm"])
    except:
        llm = "False"


    if llm == "True" and  "?" in message.text and not await is_admin(update, context):
        search_result, source_url = await searx_search(message.text)

        if search_result:
            # 2. –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Ollama
            answer = await ask_ollama(
                f"–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '{message.text}' "
                f"–Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n{search_result[:2000]}"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
            response_text = f"üîç –û—Ç–≤–µ—Ç:\n{answer}\n\n"
            if source_url:
                response_text += f"_[–ò—Å—Ç–æ—á–Ω–∏–∫]({source_url})_"

            await message.reply_text(
                response_text,
               # parse_mode="Markdown",
                disable_web_page_preview=True
            )
        else:
            # 3. –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            #llm_response = await ask_ollama(message.text)

            #await message.reply_text(f"üí° –û—Ç–≤–µ—Ç:\n{llm_response}")    
            pass


def generate_captcha():
    a = random.randint(1, 10)
    b = random.randint(1, 10)
    operation = random.choice(["+", "-", "*"])
    
    if operation == "+":
        answer = a + b
    elif operation == "-":
        answer = a - b
    else:
        answer = a * b
    
    question = f"–†–µ—à–∏—Ç–µ –∫–∞–ø—á—É: {a} {operation} {b} = ?"
    wrong_answers = [answer + random.randint(1, 3), answer - random.randint(1, 3)]
    options = [answer] + wrong_answers
    random.shuffle(options)
    return question, options, str(answer)

async def send_captcha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    try:
        captcha = (channels[chat_id]['captcha'])
    except:
        captcha = "True"
    if channels[chat_id]["captcha"] != "True": # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞ –ª–∏ –≤ –∫–∞–Ω–∞–ª–µ –∫–∞–ø—Ç—á–∞
        return

    new_member = update.message.new_chat_members[0]
    user_id = update.effective_user.id
    permissions = ChatPermissions(
                    can_send_messages=False,  
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False,
                )
    await context.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    permissions=permissions,
        )
    if chat_id in channels:
        welcome_data = channels[chat_id]
        welcome_text = (
            f" {new_member.mention_html()}, {welcome_data['welcome_text']}\n\n"
            " **–†–µ—à–∏—Ç–µ –∫–∞–ø—á—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:**"
        )
    else:
        welcome_text = f"{new_member.mention_html()}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–µ—à–∏—Ç–µ –∫–∞–ø—á—É:"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
    question, options, correct_answer = generate_captcha()
    captcha_storage[new_member.id] = correct_answer
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(str(option), callback_data=str(option))]
        for option in options
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"{welcome_text}\n\n{question}",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )

    
async def handle_captcha_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_answer = query.data
    chat_id = query.message.chat_id   
    if user_id in captcha_storage and user_answer == captcha_storage[user_id]:
        await query.answer("–í–µ—Ä–Ω–æ! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.")
        await query.delete_message()
        del captcha_storage[user_id]
        permissions = ChatPermissions(
    can_send_messages=True,          
    can_send_polls=False,           
    can_send_other_messages=True, 
    can_add_web_page_previews=False, 
    can_change_info=False,           
    can_invite_users=False,         
    can_pin_messages=False,        
)
        await context.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    permissions=permissions,
        )
    else:
        await query.answer("–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
def main():
    application = Application.builder().token(bot_token).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, send_captcha))
    application.add_handler(CallbackQueryHandler(handle_captcha_response))
    application.run_polling()

if __name__ == '__main__':
    main()
